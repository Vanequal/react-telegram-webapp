import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from '../../api/axios';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π endpoint
export const uploadFiles = createAsyncThunk(
  'post/uploadFiles',
  async (files, { rejectWithValue }) => {
    try {
      if (!files || files.length === 0) {
        return [];
      }

      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã:', files.length);

      const formData = new FormData();
      files.forEach((file) => {
        formData.append('attachments', file);
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π endpoint
      const res = await axios.post('/api/v1/messages/attachments', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      console.log('‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', res.data);
      return res.data;
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', err?.response?.data || err.message);
      return rejectWithValue(err?.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
    }
  }
);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤
export const createPost = createAsyncThunk(
  'post/create',
  async ({ message_text, section_key, theme_id, publishing_method = 'original', files = [] }, { rejectWithValue, dispatch }) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      let uploadedFiles = [];
      if (files && files.length > 0) {
        const uploadResult = await dispatch(uploadFiles(files)).unwrap();
        uploadedFiles = uploadResult;
      }

      // FIX: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'gpt' –≤ 'openai' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API
      const apiPublishingMethod = publishing_method === 'gpt' ? 'openai' : publishing_method;

      // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ API
      const requestData = {
        data: {
          text: message_text,
          type: 'post',
          publishing_method: apiPublishingMethod
        },
        attachments: uploadedFiles || []
      };

      const requestConfig = {
        params: {
          section_key: section_key,
          theme_id: theme_id
        },
        headers: {
          'Content-Type': 'application/json'
        }
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:', {
        url: '/api/v1/posts',
        data: requestData,
        params: requestConfig.params,
        attachments_count: uploadedFiles.length,
        publishing_method: apiPublishingMethod
      });

      const res = await axios.post('/api/v1/posts', requestData, requestConfig);

      console.log('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', res.data);

      return {
        ...res.data,
        uploaded_files: uploadedFiles
      };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', err?.response?.data || err.message);

      if (err?.response?.data?.error?.details) {
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', err.response.data.error.details);
      }

      return rejectWithValue(
        err?.response?.data?.error?.message ||
        err?.response?.data?.detail ||
        err?.response?.data?.error ||
        '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞'
      );
    }
  }
);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint /api/v1/messages/openai
export const createPostPreview = createAsyncThunk(
  'post/createPreview',
  async ({ section_key, theme_id, text }, { rejectWithValue }) => {
    try {
      const res = await axios.post(
        `/api/v1/messages/openai`,
        { text },
        {
          params: { section_key, theme_id }
        }
      );

      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç openai_text, –∞ —Ñ—Ä–æ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç gpt_text
      return {
        original_text: res.data.original_text,
        gpt_text: res.data.openai_text || res.data.gpt_text
      };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é:', err?.response?.data || err.message);
      return rejectWithValue(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞');
    }
  }
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
export const fetchPostsInSection = createAsyncThunk(
  'post/fetchPostsInSection',
  async ({ section_key, theme_id, limit = 100, offset = 0 }, { rejectWithValue }) => {
    try {
      const res = await axios.get(`/api/v1/posts`, {
        params: {
          section_key: section_key,
          theme_id: theme_id,
          limit: limit,
          offset: offset
        }
      });

      return res.data;
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', err?.response?.data || err.message);
      return rejectWithValue(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤');
    }
  }
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
export const fetchPostById = createAsyncThunk(
  'post/fetchPostById',
  async ({ message_id, section_key, theme_id }, { rejectWithValue }) => {
    try {
      const res = await axios.get(`/api/v1/posts/${message_id}`, {
        params: {
          section_key: section_key,
          theme_id: theme_id
        }
      });

      return res.data;
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞:', err?.response?.data || err.message);
      return rejectWithValue(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞');
    }
  }
);

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤
export const createComment = createAsyncThunk(
  'post/createComment',
  async ({ post_id, message_text, section_key, theme_id, files = [] }, { rejectWithValue, dispatch }) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      let uploadedFiles = [];
      if (files && files.length > 0) {
        const uploadResult = await dispatch(uploadFiles(files)).unwrap();
        uploadedFiles = uploadResult;
      }

      console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', {
        text: message_text,
        content_id: post_id,
        section_key: section_key,
        theme_id,
        files_count: uploadedFiles.length
      });

      // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ API
      const requestData = {
        data: {
          text: message_text,
          type: 'comment',
          content_id: post_id,
        },
        attachments: uploadedFiles || []
      };

      const requestConfig = {
        params: {
          section_key: section_key,
          theme_id: theme_id
        },
        headers: {
          'Content-Type': 'application/json'
        }
      };

      console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', {
        url: '/api/v1/comments',
        data: requestData,
        params: requestConfig.params
      });

      const res = await axios.post('/api/v1/comments', requestData, requestConfig);

      console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω:', res.data);

      return {
        ...res.data,
        post_id: post_id,
        uploaded_files: uploadedFiles
      };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', {
        error: err?.response?.data || err.message,
        status: err?.response?.status,
        headers: err?.response?.headers
      });

      if (err.response?.data?.detail) {
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.response.data.detail);
      }

      return rejectWithValue(
        err.response?.data?.detail ||
        err.response?.data?.error ||
        err.response?.data?.message ||
        '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
      );
    }
  }
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
export const fetchPostComments = createAsyncThunk(
  'post/fetchComments',
  async ({ post_id, section_key, theme_id }, { rejectWithValue, getState }) => {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', {
        message_id: post_id,
        section_key: section_key,
        theme_id
      });

      const res = await axios.get('/api/v1/comments', {
        params: {
          message_id: post_id,
          section_key: section_key,
          theme_id: theme_id,
          limit: 100,
          offset: 0
        }
      });

      console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', res.data);
      return { postId: post_id, comments: res.data || [] };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err?.response?.data || err.message);
      return rejectWithValue(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    }
  }
);

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω endpoint –Ω–∞ PATCH
export const reactToPost = createAsyncThunk(
  'post/reactToPost',
  async ({ post_id, reaction, section_key, theme_id }, { rejectWithValue }) => {
    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é:', {
        message_id: post_id,
        reaction,
        section_key,
        theme_id
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –≤–º–µ—Å—Ç–æ POST –∏ –Ω–æ–≤—ã–π endpoint
      const res = await axios.patch(
        `/api/v1/messages/${post_id}/update_reaction`,
        { reaction },
        {
          params: {
            section_key,
            theme_id
          }
        }
      );

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é:', res.data);

      return {
        post_id,
        ...res.data
      };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏:', err?.response?.data || err.message);
      return rejectWithValue(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏');
    }
  }
);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ endpoint
export const fetchDownloadUrl = createAsyncThunk(
  'post/fetchDownloadUrl',
  async ({ attachmentUrl }, { rejectWithValue }) => {
    try {
      // –°–æ–≥–ª–∞—Å–Ω–æ Swagger: GET /api/v1/messages/attachments/{attachment_url}
      // attachment_url –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ path parameter –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ encodeURIComponent
      const downloadUrl = `${axios.defaults.baseURL}/api/v1/messages/attachments/${attachmentUrl}`;

      console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –¥–ª—è —Ñ–∞–π–ª–∞:`, {
        original: attachmentUrl,
        downloadUrl: downloadUrl
      });

      return { attachmentUrl, url: downloadUrl };
    } catch (err) {
      console.error('üî• –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL —Ñ–∞–π–ª–∞:', {
        error: err?.response?.data || err.message,
        attachmentUrl,
        status: err?.response?.status
      });
      return rejectWithValue(err?.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–∫–∏');
    }
  }
);

const postSlice = createSlice({
  name: 'post',
  initialState: {
    loading: false,
    error: null,
    preview: null,
    comments: {},
    posts: [],
    fileLinks: {},
    selectedPost: null,
    commentsLoading: false,
    commentError: null,
    commentsLoadingFlags: {},
    postsLoaded: false,
    uploadedFiles: [],
  },
  reducers: {
    clearError: (state) => {
      state.error = null;
      state.commentError = null;
    },
    clearPosts: (state) => {
      state.posts = [];
      state.postsLoaded = false;
      state.commentsLoadingFlags = {};
    },
    clearComments: (state, action) => {
      if (action.payload) {
        delete state.comments[action.payload];
        delete state.commentsLoadingFlags[action.payload];
      } else {
        state.comments = {};
        state.commentsLoadingFlags = {};
      }
    },
    clearPreview: (state) => {
      state.preview = null;
    },
    clearUploadedFiles: (state) => {
      state.uploadedFiles = [];
    },
    setCommentsLoadingFlag: (state, action) => {
      const { postId, loading } = action.payload;
      state.commentsLoadingFlags[postId] = loading;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(uploadFiles.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(uploadFiles.fulfilled, (state, action) => {
        state.loading = false;
        state.uploadedFiles = action.payload;
      })
      .addCase(uploadFiles.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
      .addCase(createPost.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(createPost.fulfilled, (state, action) => {
        state.loading = false;
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        const newPost = {
          ...action.payload,
          likes: action.payload.reactions?.count_likes || 0,
          dislikes: action.payload.reactions?.count_dislikes || 0,
          user_reaction: action.payload.reactions?.user_reaction || null
        };
        state.posts.unshift(newPost);
        state.preview = null; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        state.uploadedFiles = []; // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      })
      .addCase(createPost.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
      .addCase(createPostPreview.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(createPostPreview.fulfilled, (state, action) => {
        state.loading = false;
        state.preview = action.payload;
      })
      .addCase(createPostPreview.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
      .addCase(fetchPostsInSection.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchPostsInSection.fulfilled, (state, action) => {
        state.loading = false;
        state.postsLoaded = true;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const newPosts = (action.payload || []).map(post => ({
          ...post,
          likes: post.reactions?.count_likes || 0,
          dislikes: post.reactions?.count_dislikes || 0,
          user_reaction: post.reactions?.user_reaction || null,
          comments_count: post.comments?.length || 0
        }));

        const postsChanged = JSON.stringify(state.posts.map(p => p.id)) !== JSON.stringify(newPosts.map(p => p.id));

        if (postsChanged) {
          state.posts = newPosts;
        }
      })
      .addCase(fetchPostsInSection.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
        state.posts = [];
        state.postsLoaded = false;
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
      .addCase(fetchPostById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchPostById.fulfilled, (state, action) => {
        state.loading = false;
        const post = action.payload;
        state.selectedPost = {
          ...post,
          likes: post.reactions?.count_likes || 0,
          dislikes: post.reactions?.count_dislikes || 0,
          user_reaction: post.reactions?.user_reaction || null,
          comments_count: post.comments?.length || 0
        };
      })
      .addCase(fetchPostById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      .addCase(fetchPostComments.pending, (state, action) => {
        const postId = action.meta.arg.post_id;
        state.commentsLoading = true;
        state.commentError = null;
        state.commentsLoadingFlags[postId] = true;
      })
      .addCase(fetchPostComments.fulfilled, (state, action) => {
        const { postId, comments } = action.payload;
        state.commentsLoading = false;
        state.commentsLoadingFlags[postId] = false;

        // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        state.comments[postId] = comments || [];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ
        const postIndex = state.posts.findIndex(post => post.id === postId);
        if (postIndex !== -1) {
          state.posts[postIndex] = {
            ...state.posts[postIndex],
            comments_count: comments ? comments.length : 0
          };
        }

        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ store:', {
          postId,
          commentsCount: comments?.length || 0,
          comments: comments
        });
      })
      .addCase(fetchPostComments.rejected, (state, action) => {
        const postId = action.meta.arg?.post_id;
        state.commentsLoading = false;
        state.commentError = action.payload;
        if (postId) {
          state.commentsLoadingFlags[postId] = false;
        }
      })

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      .addCase(createComment.pending, (state) => {
        state.commentsLoading = true;
        state.commentError = null;
      })
      .addCase(createComment.fulfilled, (state, action) => {
        state.commentsLoading = false;
        const comment = action.payload;
        const post_id = comment.post_id;

        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ store:', comment);

        if (!state.comments[post_id]) {
          state.comments[post_id] = [];
        }

        state.comments[post_id].push(comment);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const postIndex = state.posts.findIndex(post => post.id === post_id);
        if (postIndex !== -1) {
          state.posts[postIndex] = {
            ...state.posts[postIndex],
            comments_count: (state.posts[postIndex].comments_count || 0) + 1
          };
        }
      })
      .addCase(createComment.rejected, (state, action) => {
        state.commentsLoading = false;
        state.commentError = action.payload;
      })

      // –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç - –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º PATCH endpoint
      .addCase(reactToPost.fulfilled, (state, action) => {
        const { post_id, count_likes, count_dislikes, new_reaction } = action.payload;
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', {
          post_id,
          count_likes,
          count_dislikes,
          new_reaction
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤
        const postIndex = state.posts.findIndex(post => post.id === post_id);
        if (postIndex !== -1) {
          state.posts[postIndex] = {
            ...state.posts[postIndex],
            likes: count_likes,
            dislikes: count_dislikes,
            user_reaction: new_reaction,
            reactions: {
              ...state.posts[postIndex].reactions,
              count_likes: count_likes,
              count_dislikes: count_dislikes,
              user_reaction: new_reaction
            }
          };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        if (state.selectedPost && state.selectedPost.id === post_id) {
          state.selectedPost = {
            ...state.selectedPost,
            likes: count_likes,
            dislikes: count_dislikes,
            user_reaction: new_reaction,
            reactions: {
              ...state.selectedPost.reactions,
              count_likes: count_likes,
              count_dislikes: count_dislikes,
              user_reaction: new_reaction
            }
          };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        Object.keys(state.comments).forEach(postKey => {
          const postComments = state.comments[postKey];
          if (postComments && Array.isArray(postComments)) {
            // –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const commentIndex = postComments.findIndex(comment => comment.id === post_id);
            if (commentIndex !== -1) {
              state.comments[postKey][commentIndex] = {
                ...state.comments[postKey][commentIndex],
                reactions: {
                  ...state.comments[postKey][commentIndex].reactions,
                  count_likes: count_likes,
                  count_dislikes: count_dislikes,
                  user_reaction: new_reaction
                }
              };
            }

            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã (replies) –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            postComments.forEach((comment, commentIdx) => {
              if (comment.replies && Array.isArray(comment.replies)) {
                const replyIndex = comment.replies.findIndex(reply => reply.id === post_id);
                if (replyIndex !== -1) {
                  state.comments[postKey][commentIdx].replies[replyIndex] = {
                    ...state.comments[postKey][commentIdx].replies[replyIndex],
                    reactions: {
                      ...state.comments[postKey][commentIdx].replies[replyIndex].reactions,
                      count_likes: count_likes,
                      count_dislikes: count_dislikes,
                      user_reaction: new_reaction
                    }
                  };
                }
              }
            });
          }
        });
      })
      .addCase(reactToPost.rejected, (state, action) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏:', action.payload);
        state.error = action.payload;
      })

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
      .addCase(fetchDownloadUrl.fulfilled, (state, action) => {
        const { attachmentUrl, url } = action.payload;
        state.fileLinks = {
          ...state.fileLinks,
          [attachmentUrl]: url
        };
      })
      .addCase(fetchDownloadUrl.rejected, (state, action) => {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', action.payload);
      });
  }
});

export const { clearError, clearPosts, clearComments, clearPreview, clearUploadedFiles, setCommentsLoadingFlag } = postSlice.actions;

export default postSlice.reducer;