// components/IdeaPreviewCard.jsx
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import FilePreview from './FilePreview';
import FileAttachments from './FileAttachments';

const IdeaPreviewCard = ({ preview, attachedFiles }) => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–æ–≤ - –ª–æ–∫–∞–ª—å–Ω—ã–µ File objects –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const fileType = useMemo(() => {
    if (!attachedFiles || attachedFiles.length === 0) return null;
    
    const firstFile = attachedFiles[0];
    
    // –ï—Å–ª–∏ —ç—Ç–æ File object (–µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ type –∏ size –∫–∞–∫ —á–∏—Å–ª–æ)
    if (firstFile instanceof File || (firstFile.type && typeof firstFile.size === 'number' && !firstFile.stored_path)) {
      return 'local';
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–µ—Å—Ç—å stored_path –∏–ª–∏ id)
    if (firstFile.stored_path || firstFile.id) {
      return 'uploaded';
    }
    
    return 'local'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
  }, [attachedFiles]);

  console.log('üìÑ IdeaPreviewCard —Ñ–∞–π–ª—ã:', {
    attachedFiles,
    fileType,
    filesCount: attachedFiles?.length || 0
  });

  const renderFiles = () => {
    if (!attachedFiles || attachedFiles.length === 0) return null;

    if (fileType === 'uploaded') {
      // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º FileAttachments
      return (
        <FileAttachments 
          files={attachedFiles} 
          onImageClick={() => {}} // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–µ–≤—å—é –Ω–µ –Ω—É–∂–µ–Ω –º–æ–¥–∞–ª
        />
      );
    } else {
      // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º FilePreview
      return <FilePreview files={attachedFiles} />;
    }
  };

  return (
    <div className="idea-card-gpt">
      <div className="idea-card-gpt__section">
        <p className="idea-card-gpt__label">–û—Ä–∏–≥–∏–Ω–∞–ª —Ç–µ–∫—Å—Ç–∞:</p>
        <p className="idea-card-gpt__text">{preview.original_text}</p>
        {attachedFiles.length > 0 && (
          <div className="idea-card-gpt__files">
            {renderFiles()}
          </div>
        )}
      </div>

      <div className="idea-card-gpt__section">
        <p className="idea-card-gpt__label">–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç –ò–ò:</p>
        <p className="idea-card-gpt__text">{preview.gpt_text}</p>
        {attachedFiles.length > 0 && (
          <div className="idea-card-gpt__files">
            {renderFiles()}
          </div>
        )}
      </div>
    </div>
  );
};

IdeaPreviewCard.propTypes = {
  preview: PropTypes.shape({
    original_text: PropTypes.string.isRequired,
    gpt_text: PropTypes.string.isRequired
  }).isRequired,
  attachedFiles: PropTypes.array.isRequired
};

export default IdeaPreviewCard;