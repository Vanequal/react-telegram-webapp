// EditIdeaPageGPT.jsx
import React, { useState, useCallback, useEffect } from 'react';
import { useNavigate, useSearchParams, useLocation } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { createPostPreview, createPost, clearError } from '../store/slices/postSlice';

// Components
import MindVaultHeader from '../components/UI/MindVaultHeader';
import IdeaPreviewCard from '../components/IdeaPreviewCard';

// Styles
import '../styles/components/edit-idea-gpt.scss';

// Constants
const DEFAULT_SECTION_KEY = 'chat_ideas';
const DEFAULT_THEME_ID = 1;

const EditIdeaPageGPT = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [searchParams] = useSearchParams();
  const location = useLocation();
  
  // State from navigation - –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–µ–≤—å—é
  const attachedFiles = location.state?.attachedFiles || [];
  const navigationPreview = location.state?.preview || null;
  
  // Redux state - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–≤—å—é –∏–∑ Redux –∏–ª–∏ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const reduxPreview = useSelector(state => state.post.preview);
  const preview = reduxPreview || navigationPreview;
  const loading = useSelector(state => state.post.loading);
  const error = useSelector(state => state.post.error);

  // Derived values
  const sectionKey = searchParams.get('section_key') || DEFAULT_SECTION_KEY;
  const themeId = Number(searchParams.get('theme_id')) || DEFAULT_THEME_ID;

  // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    dispatch(clearError());
  }, [dispatch]);

  // Handlers
  const handlePublish = useCallback(async (text, publishing_method = 'original') => {
    if (!text || !text.trim()) {
      alert('–¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç:', {
      text: text.substring(0, 50) + (text.length > 50 ? '...' : ''),
      publishing_method,
      files_count: attachedFiles?.length || 0,
      section_key: sectionKey,
      theme_id: themeId
    });

    const payload = {
      message_text: text.trim(),
      section_key: sectionKey,
      theme_id: themeId,
      files: attachedFiles || [],
      publishing_method
    };

    try {
      const actionResult = await dispatch(createPost(payload));
      
      if (actionResult.meta.requestStatus === 'fulfilled') {
        console.log('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', actionResult.payload);
        navigate('/mindvault');
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        const errorMsg = typeof actionResult.payload === 'string' 
          ? actionResult.payload 
          : actionResult.payload?.message || actionResult.payload?.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', errorMsg);
        alert(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${errorMsg}`);
      }
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
    }
  }, [dispatch, sectionKey, themeId, attachedFiles, navigate]);

  const handlePublishOriginal = useCallback(() => {
    if (!preview?.original_text) {
      alert('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
    handlePublish(preview.original_text, 'original');
  }, [handlePublish, preview]);

  const handlePublishGPT = useCallback(() => {
    if (!preview?.gpt_text) {
      alert('GPT –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }
    handlePublish(preview.gpt_text, 'gpt');
  }, [handlePublish, preview]);

  const handleEditGPT = useCallback(() => {
    if (!preview?.gpt_text) {
      alert('GPT –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    navigate('/textgpteditpage', { 
      state: { 
        gptText: preview.gpt_text,
        attachedFiles: attachedFiles,
        section_key: sectionKey,
        theme_id: themeId
      } 
    });
  }, [navigate, preview, attachedFiles, sectionKey, themeId]);

  const handleNavigateBack = useCallback(() => {
    window.history.back();
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const displayError = error && typeof error === 'string' ? error : null;

  return (
    <div className="edit-idea-page-gpt">
      <MindVaultHeader
        onBackClick={handleNavigateBack}
        onDescriptionClick={() => {}}
        hideSectionTitle={true}
        hideDescription={true}
        textColor="black"
        bgColor="#EEEFF1"
      />

      <div className="edit-idea-page-gpt__content">
        {displayError && (
          <div className="edit-idea-page-gpt__error">
            <p className="error-message">‚ùå {displayError}</p>
            <button 
              className="error-dismiss"
              onClick={() => dispatch(clearError())}
            >
              ‚úï
            </button>
          </div>
        )}

        {!preview ? (
          <EmptyPreview sectionKey={sectionKey} />
        ) : (
          <>
            <IdeaPreviewCard
              preview={preview}
              attachedFiles={attachedFiles}
            />
            
            <PreviewActions
              onPublishOriginal={handlePublishOriginal}
              onPublishGPT={handlePublishGPT}
              onEditGPT={handleEditGPT}
              loading={loading}
              hasOriginal={!!preview.original_text}
              hasGPT={!!preview.gpt_text}
            />
          </>
        )}
      </div>

      {/* –£–±–∏—Ä–∞–µ–º PostComposer - –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ—É—Ç–µ—Ä–∞! */}
    </div>
  );
};

// Sub-components
const EmptyPreview = ({ sectionKey }) => (
  <div className="edit-idea-page-gpt__empty-container">
    <p className="edit-idea-page-gpt__empty-message">
      –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.
    </p>
    <p className="edit-idea-page-gpt__empty-hint">
      –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é.
    </p>
    {sectionKey && (
      <p className="edit-idea-page-gpt__section-info">
        –°–µ–∫—Ü–∏—è: <strong>{sectionKey}</strong>
      </p>
    )}
  </div>
);

const PreviewActions = ({ 
  onPublishOriginal, 
  onPublishGPT, 
  onEditGPT, 
  loading, 
  hasOriginal, 
  hasGPT 
}) => (
  <div className="idea-card-gpt__actions">
    <button 
      className="idea-card-gpt__action-button" 
      onClick={onPublishOriginal}
      disabled={loading || !hasOriginal}
      title={!hasOriginal ? '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : ''}
    >
      {loading ? '–ü—É–±–ª–∏–∫—É–µ–º...' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª'}
    </button>
    
    <button 
      className="idea-card-gpt__action-button" 
      onClick={onPublishGPT}
      disabled={loading || !hasGPT}
      title={!hasGPT ? 'GPT –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' : ''}
    >
      {loading ? '–ü—É–±–ª–∏–∫—É–µ–º...' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é GPT'}
    </button>
    
    <button 
      className="idea-card-gpt__action-button idea-card-gpt__action-button--secondary" 
      onClick={onEditGPT}
      disabled={loading || !hasGPT}
      title={!hasGPT ? 'GPT –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' : ''}
    >
      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é GPT
    </button>
  </div>
);

export default EditIdeaPageGPT;